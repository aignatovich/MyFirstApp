@using App.Models.ManagingTableModels
@using PagedList.Mvc;
@using App.Models;
@model TableData
@{
    int days = Model.DayLimit;
    int startYear = Model.StartYear;
}
<div>
    <br />
</div>
<div class="row pad5 clrWsm">
    <div class="col-xs-5">
        <select id="selectMonth" data-bind="options: months, optionsText: 'Name', optionsValue: 'Code', value: month.Code, optionsCaption: month"></select>
    </div>
    <div class="col-xs-5">
        <h4>Dates of Absence</h4>
    </div>
    <div class="col-xs-1 pad5">
        <select id="selectYear" data-bind="options: years, optionsText: 'Name', optionsValue: 'Name', value: year.Name, optionsCaption: year.Name"></select>
    </div>
</div>
<table class="table">
    <thead>
        <tr>
            <th class="brdCell"></th>

            <!-- ko foreach: daysToDisplay  -->
            <td style="padding:0px;" data-bind="attr: {'class': ComputeDayCellStyle(Value)}, text: Name"></td>
            <!-- /ko -->

            <th class="brdCell"></th>
        </tr>
    </thead>
    <tbody>
        <tr class="lbrdRow">
            <td class="lbrdCell" id="days" style="padding: 0px;" data-bind="text: tableRowNameEmployee"></td>

            <!-- ko foreach: daysToDisplay  -->
            <th class="dayCell" style="padding: 0px;" data-bind="text: Value"></th>
            <!-- /ko -->

            <th class="rbrdCell" style="padding: 0px;" data-bind="text: tableTotalDays"></th>
        </tr>

        <!-- ko foreach: employees  -->
        <tr class="lbrdRow">
            <td class="empNameCell" style="padding: 0px;" data-bind="text: DataValue"></td>
            <!-- ko foreach: $parent.daysToDisplay  -->
            <td class="cell" style="padding: 3px;" data-bind="attr: {'class': ComputeCellStyle($parent, $index)}, text: ComputeCellContent($parent, $index)"></td>
            <!-- /ko -->
            <td class="resWCell " style="padding: 3px;" data-bind="text: $parent.totalEmployeeAbsence()[$index()]()"></td>
        </tr>
        <!-- /ko -->

        <tr id="horizontal_rez" class="lbrdRow">
            <td class="monthTotal" style="padding: 3px;" data-bind="text: tableMonthTotal"></td>

            <!-- ko foreach: daysToDisplay  -->
            <td class="greenCell" style="padding: 3px;" data-bind="text: GetTotalDayAbsenceValue($index())"></td>
            <!-- /ko -->

            <td class="bigGreenCell" style="padding: 3px;" id="totalDays" data-bind="text: absenceSummary()"></td>
        </tr>
    </tbody>
</table>
@Html.PagedListPager(Model.Employees, page => Url.Action("Manage", new { month = (int)Model.Month, year = Model.Year, page, sort = Model.Sort }))


@using (Html.BeginForm("Manage", "Employee", FormMethod.Get, new { }))
{
    @Html.Hidden("month", "", new { @id = "monthBox" })
    @Html.Hidden("year", "", new { @id = "yearBox" })
    <input type="submit" class="hiddn" id="datepickSub" tabindex="-1" />
}

<ul id="contextMenu" class="dropdown-menu" role="menu" style="display:none; background-color:gainsboro;">
    <li id="vac" class="vacclr">
        <a class="cmenufont" style="color:white;" tabindex="-1">Vacation</a>
    </li>
    <li id="sic" class="sickclr">
        <a class="cmenufont" style="color:white;" tabindex="-1" href="#">Sick</a>
    </li>
    <li id="per" class="perclr">
        <a class="cmenufont" style="color:white;" tabindex="-1" href="#">Personal</a>
    </li>
</ul>

@section Scripts{
    @Scripts.Render("~/bundles/jq")
    @Styles.Render("~/Content/nice-select-styles")
    @Styles.Render("~/Content/register-styles")
    @Scripts.Render("~/bundles/register")
    @Scripts.Render("~/bundles/knockout")

    <script>
        (function () {
            $('#selectMonth').niceSelect();
            $('#selectYear').niceSelect();

            var column;
            var row;
            var cell;
            var name;
            var surname;

            function pushData(id, val)
            {
                $.ajax({
                    type: "POST",
                    url: "/Employee/ApplyChanges",
                    data: {userId : id, month: Model.Month, year: Model.Year, day: column, reason: val},
                    datatype: "html",
                    success: function (data) {
                        $('#result').html(data);
                    }
                });

                var employees = myViewModel.employees;
                var employee = $.grep(employees, function(e){ return e.Id == id});
                employee = employee[0];
                employee.AbsenceList().push({UserId : id, Month: Model.Month, Year: Model.Year, Day: column, Reason: val});
            }

            function contextClickVacation(o, empName, empSurname) {
                if ($(o).text() != "V" && $(o).text() != "P" && $(o).text() != "S") {                   
                    $(o).css("background-color", "#600000");
                    $(o).text("V");
                    var employees = myViewModel.employees;
                    var id = $.grep(employees, function(e){ return e.DataValue == name + " " + surname})[0].Id;
                    pushData(id,1);
                }
            }

            function contextClickSick(o, empName, empSurname) {
                if ($(o).text() != "V" && $(o).text() != "P" && $(o).text() != "S") {
                    $(o).css("background-color", "#339933");
                    $(o).text("S");
                    var employees = myViewModel.employees;
                    var id = $.grep(employees, function(e){ return e.DataValue == name + " " + surname})[0].Id;
                    pushData(id,2);
                }
            }

            function contextClickPersonal(o, empName, empSurname) {
                if ($(o).text() != "V" && $(o).text() != "P" && $(o).text() != "S") {
                    $(o).css("background-color", "#FFCC66");
                    $(o).text("P");
                    var employees = myViewModel.employees;
                    var id = $.grep(employees, function(e){ return e.DataValue == name + " " + surname})[0].Id;
                    pushData(id,3);
                }
            }


            $('.cell').on('click', function () {
                $(this).contextmenu();
            });

            $('select').on('change', function () {
                $('#monthBox').val(getMonthIndex($(".option.selected").eq(0).text()));
                $('#yearBox').val($(".option.selected").eq(1).text());
                $('#datepickSub').click();
            });

            (function ($, window) {

                $.fn.contextMenu = function (settings) {

                    return this.each(function () {

                        // Open context menu
                        $(this).on("contextmenu", function (e) {
                            // return native menu if pressing control
                            if (e.ctrlKey) return;

                            //open menu
                            var $menu = $(settings.menuSelector)
                                .data("invokedOn", $(e.target))
                                .show()
                                .css({
                                    position: "absolute",
                                    trigger: 'left',
                                    left: getMenuPosition(e.clientX, 'width', 'scrollLeft'),
                                    top: getMenuPosition(e.clientY, 'height', 'scrollTop')
                                })
                                .off('click')
                                .on('click', 'a', function (e) {
                                    $menu.hide();

                                    var $invokedOn = $menu.data("invokedOn");
                                    var $selectedMenu = $(e.target);

                                    settings.menuSelected.call(this, $invokedOn, $selectedMenu);
                                });

                            return false;
                        });

                        //make sure menu closes on any click
                        $(document).click(function () {
                            $(settings.menuSelector).hide();
                        });
                    });

                    function getMenuPosition(mouse, direction, scrollDir) {
                        var win = $(window)[direction](),
                            scroll = $(window)[scrollDir](),
                            menu = $(settings.menuSelector)[direction](),
                            position = mouse + scroll;

                        // opening menu would pass the side of the page
                        if (mouse + menu > win && menu < mouse)
                            position -= menu;

                        return position;
                    }

                };
            })(jQuery, window);

            $(".cell").contextMenu({
                menuSelector: "#contextMenu",
                menuSelected: function (invokedOn, selectedMenu) {
                }
            });

            $(".cell").on("contextmenu", function () {
                column = $(this).parent().children().index(this);
                row = $(this).parent().parent().children().index(this.parentNode);
                cell = $(this);
                var str = $(cell).parent().find('td:first').text().split(' ');
                name = str[0];
                surname = str[1];
            })
            $('#vac').on("click", function () {
                contextClickVacation(cell, name, surname);
            })

            $('#sic').on("click", function () {
                contextClickSick(cell, name, surname);
            })

            $('#per').on("click", function () {
                contextClickPersonal(cell, name, surname);
            })
        })();
    </script>
}

<script src="~/Scripts/knockout-3.3.0.js"></script>
<script src="~/Scripts/jquery-1.10.2.min.js"> </script>
<script type="text/javascript">


    var Model = @Html.Raw(Json.Encode(Model));
    var months = [
        { Name: "January", Code: "1" },
        { Name: "February", Code: "2" },
        { Name: "March", Code: "3" },
        { Name: "April", Code: "4" },
        { Name: "May", Code: "5" },
        { Name: "June", Code: "6" },
        { Name: "July", Code: "7" },
        { Name: "August", Code: "8" },
        { Name: "September", Code: "9" },
        { Name: "October", Code: "10" },
        { Name: "November", Code: "11" },
        { Name: "December", Code: "12" }
    ];

    var daysEnum = [
       {Name : "Sun", Code : "0" },
       {Name : "Mon", Code : "1" },
       {Name : "Tue", Code : "2" },
       {Name : "Wed", Code : "3" },
       {Name : "Thu", Code : "4" },
       {Name : "Fri", Code : "5" },
       {Name : "Sat", Code : "6" }
    ];

    var daysToAppend = []
    var index = indexOf(Model.Month, months);
    var month = { Name: months[index].Name , Code: Model.Month };
    var year = { Name: Model.Year };
    var years = [];
    var employeesToAppend = [];

    for (var i = Model.FirstDay; i < Model.DayLimit + Model.FirstDay; i++ )
    {
        var j = i%7;
        daysToAppend[i-Model.FirstDay] = {
            Name: daysEnum[j].Name ,
            Value: i - Model.FirstDay + 1
        }
    }

    for (var i = Model.StartYear; i <= Model.EndYear; i++)
    {
        years.push({Name: i});
    }
    years = years.reverse();

    for (var i = 0; i < Model.Employees.length; i++)
    {
        employeesToAppend[i] = {
            DataValue: Model.Employees[i].Name + " " +  Model.Employees[i].Surname,
            Id: Model.Employees[i].Id,
            AbsenceList: ko.observableArray(Model.Employees[i].AbsenceList),
            RowColor: i%2
        };
    }


    function ViewModel() {
        var self = this;
        self.months = ($.grep(months, function(e){ return e.Code != month.Code}));
        self.month = month.Name;
        self.year = year;
        self.years =  ($.grep(years, function(e){ return e.Name != year.Name }));

        self.employees = employeesToAppend;
        self.daysToDisplay = daysToAppend;
        self.totalEmployeeAbsence = function()
        {
            var totalAbsenceList = Array(self.employees.length);

            for (var i = 0; i < self.employees.length; i++)
            {
                totalAbsenceList[i] = ko.computed(function(){
                    var emps = self.employees;
                    var currEmp = emps[i];
                    return currEmp.AbsenceList().length;
                }, self);
            }

            return totalAbsenceList;
        }

        self.totalDayAbsence = function()
        {
            var totalAbsenceList = Array(self.employees.length);
            var employees = self.employees;
            for (var i = 0; i < self.daysToDisplay.length; i++)
            {
                totalAbsenceList[i] = ko.computed(function(){  
                    count = 0;
                    for (var j = 0; j < self.employees.length; j++)
                    {
                        var currentEmployee = employees[j];
                        var currentEmployeeAbsenceList = currentEmployee.AbsenceList();
                        var days = $.grep(currentEmployeeAbsenceList, function(e){ return e.Day == i+1 });
                        count += days.length == 0 ? 0 : 1;                            
                    }
                    return count;
                }, self);
            }            
        return totalAbsenceList;
    }
  
        self.absenceSummary = function(){

            count = 0;
            var employees = self.employees;
            for (var i = 0; i < employees.length; i++)
            {
                count += employees[i].AbsenceList().length;
            }
            return count;
        };
        self.tableRowNameEmployee = "Employee name";
        self.tableMonthTotal = "Month total";
        self.tableTotalDays = "Total days";
       
    };

    var myViewModel = new ViewModel();
    ko.applyBindings(myViewModel);

    function ComputeHorizontalCellValue(absenceList)
    {
        var count = 0;
        for (var j = 0; j < absenceList().length; j++)
        {
            if (absenceList().Month == Model.Month)
            {
                count ++;
            }
        }
        return count;
    }

    ko.observableArray.fn.find = function (prop, data) {
        var valueToMatch = data[prop];
        return ko.utils.arrayFirst(this(), function (item) {
            return item[prop] === valueToMatch;
        });
    };

    function getMonthIndex(val)
    {
        for (var i = 0; i < months.length; i++)
        {
            if (months[i].Name == val)
            {
                return (i + 1);
            }
        }
        return -1;
    }

    function indexOf(monthCode, monthList)
    {
        for (var i = 0; i < monthList.length; i++)
        {
            if (monthList[i].Code == monthCode)
            {
                return i;
            }
        }
        return -1;
    }

    function ComputeVerticalCellValue(absenceList)
    {
        var arr = $.grep(absenceList(), function(e){ return e.Month == Model.Month });
        return arr.length;
    }

    function ComputeHorizontalCellValue(employees, day)
    {
        var count = 0;
        for (var i = 0; i < employees.count; i++)
        {
            var arr = $.grep(employees[i].AbsenceList(), function(e){ return (e.Month == Model.Month && e.Day == day) });
            count += arr.length;
        }

        return count;
    }

    function ComputeCellStyle(employee, index)
    {
        var List = employee.AbsenceList();
        var day = index()  + 1;
        var value = $.grep(List, function(e){ return (e.Day == day) });
        var style = '';

        if (value == '')
        {
            if (employee.RowColor%2 == 0)
            {
                style = 'cell wCell';
            }
            else
            {
                style = 'gCell cell';
            }
        }
        else if (value != '')
        {
            if (value[0].Reason == 1)
            {
                style = 'gCell cell vacclr';
            }
            else if (value[0].Reason == 2)
            {
                style = 'gCell sickclr cell';
            }
            else if (value[0].Reason == 3)
            {
                style = 'gCell cell perclr';
            }
        }
        return style;
    }

    function ComputeCellContent(employee, index)
    {
        var List = employee.AbsenceList();
        var day = index()  + 1;
        var value = $.grep(List, function(e){ return (e.Day == day) });
        var text = '';

        if (value == '')
        {
            if (employee.RowColor%2 == 0)
            {
                text = '';
            }
            else
            {
                text = '';
            }
        }
        else if (value != '')
        {
            if (value[0].Reason == 1)
            {
                text = 'V';
            }
            else if (value[0].Reason == 2)
            {
                text = 'S';
            }
            else if (value[0].Reason == 3)
            {
                text = 'P';
            }
        }
        return text;
    }

    function ComputeDayCellStyle(dayValue)
    {
        return dayValue % 2 == 0 ? 'dCellW' : 'dCellG';
    }

    function GetTotalEmployeeAbsenceValue(index)
    {
        var currentTotalAbsence = myViewModel.totalEmployeeAbsence()[index];
        return currentTotalAbsence();
    }

    function GetTotalDayAbsenceValue(index)
    {
        var currentTotalDayAbsence = myViewModel.totalDayAbsence()[index];
        return currentTotalDayAbsence;
    }

</script>



